# to do

- Rename driven wheels property to include "vehicle_" prefix. (look for other similar cases)
- Optimize velocimeter drawing by caching geometric coordinates
- Add mouse input on menus
- Add gear shifting sounds
- Add optional gear shifting sounds derived from forced induction
- Improve UI to choose vehicle skins.
- Create showroom background for vehicle selection mode
- Re-attempt to create jumping physics. Try to find a solution to the problem regarding the vehicle's shadow being fixed on the sprite.
- Add option for vehicle to specify custom smoke
- Add option for vehicle to specify custom gear shifting sound
- Add transition effects to each state.
- Add different terrains.
- Add traffic cars.
- Add opponent cars. 
- Create more props to decorate the road.
- Introduce dynamic horizontal and vertical tilt when making turns or passing slopes, for a better animation.
- Introduce dynamic zoom perturbations to give a fake sense of depth when accelerating or braking, for a better animation.
- Add vehicle shaking animation (when off-roading or in rough terrain)
- Add digital display
- Add menu music
- Howl engine when selecting car (either a default engine howl or one using the car engine profile).
- Set resolution/fullscreen mode from options
- Introduce a more human-readable course file format, or create a usable course editor (inspirations: Stunts)
- Use a comma-separated list of gear ratio to specify gear ratios on vehicle properties.
- Use a comma-separated list of gear ratio to specify frame count for each state on vehicle properties.

# bugs

- Fix the ingame background to make it resolution-independent.
- Fix incorrect tire animation speed.
- Fix the game's physics calculations regarding torque/power. Currently, torque is incorrect most of the time.
- Fix power at lower RPMs, as RPM is being set as its minimum before power computation
- Fix gear shifting prediction. It should change when the next/previous gear provides more torque/power than the current one.

# misc.

A formula to calculate jumping trajectory/speed:

When (PosY > segment.y) immediately after a step with (PosY <= segment.y)
verticalSpeed = vehicle.body.speed * sin(slopeAngle)
PosY += verticalSpeed * dt   

Then while (PosY > segment.y), update:
verticalSpeed += gravity * dt
PosY += verticalSpeed * dt

from https://physics.stackexchange.com/questions/175381/speed-needed-to-make-a-car-jump-from-a-ramp

# brainstorm

Speedometer design with dynamic backlight: lights up circular disc behind the speedometer's pointer.
