!!!!! vehicle definition file !!!!! 
! This file contains information about the vehicle.
! Except for a few cases, most items here can be ommited or set as default.
! When omitted, default values are used. Also some items can also be set with
! special values. Items here described as optional are more "optional" than the others.
authors = Hydren
credits = Chasersgaming (sprite)
comments = An entry-level sports coupe, with a flat-4 engine.

!!! Required, these cannot be defaulted or omitted !!!
definition = vehicle
vehicle_name = Coupe RS

# The type of vehicle (car, bike, etc).    (default=car)
vehicle_type = car

### Optional info
vehicle_brand = Default
vehicle_year = 1999

### CHASSIS

# The vehicle's mass, in kg. (default=1250)
vehicle_mass = 1285

# Tire diameter, in mm. Omitted for non-wheeled vehicles.     (default=678; eq. to 26.7 inch, 275/40 R18 tire)
tire_diameter = 610

# (Optinal) The vehicle's driven wheels (front, rear, all). Omitted for non-wheeled vehicles.  (default=rear) 
driven_wheels = front

### ENGINE

# The engine's maximum RPM. Normal values are 5000-12000.    (default=7000)
engine_maximum_rpm = 7150

# The engine's maximum power, in hp.      (default=320)
engine_maximum_power = 200

# The engine's power band curve. Depending of the curve, peak power is relocated to lower       (default=typical)
# or higher RPM range. The following values are accepted: 'typical', 'peaky', 'torquey', 
# 'semitorquey' and 'wide'. If left unspecified or as default, 'typical' is assumed.
# typical: provide more power in the mid-high-RPM range
# peaky: provides more power in the high-RPM range.
# torquey: provides more power in the low-RPM range.
# semitorquey: provides more power in the mid-low-RPM range.
# wide: provide more power in the mid-RPM range, being also "flatter" than most curves
engine_power_band = semitorquey

# (Optional) Location of the engine in the vehicle (front, middle, rear).    (default=front)
engine_location = front

## Optional engine info
engine_position = transverse
engine_configuration = flat-4
engine_aspiration = naturally-aspirated
engine_valvetrain = DOHC
engine_displacement = 2500
engine_valve_count = 16

### TRANSMISSION

# The number of gears. Any positive integer can be used.    (default=6)
gear_count = 5

# Gear ratios mode. Can be default or custom.
gear_ratios = custom

# If gear_ratios is set as "custom", then these items specify each ratio for each gear, 
# up to gear_count, plus the reverse gear ratio (gear_reverse_ratio) and the differential 
# ratio (gear_differential_ratio).
gear_1_ratio = 3.5
gear_2_ratio = 2.2
gear_3_ratio = 1.7
gear_4_ratio = 1.3
gear_5_ratio = 1.0
gear_reverse_ratio = 3.2
gear_differential_ratio = 4.1

### SPRITE

# The image containing all the sprites (sprite sheet)      (default=built-in sprite)
sprite_sheet_file = coupe-asym.png

# The number of animations/states (straight-going, turning, etc) on this sheet, arranged top-down.    (default=1)
sprite_state_count = 4

# The dimensions of animation frames.      (width: default=56 / height: default=36)
sprite_frame_width = 56
sprite_frame_height = 36

# (Optional) Indicates whether this sprite is horizontally symmetrical or not. If true, the sprite    (default=false)
# will include right-leaning versions of each state (with the exception of the first state), after
# all the other sprites.
sprite_asymmetric = true

# (Optional) The vehicle's width (in pixels) as depicted on the sprite.          (default=85.7% of frame width)
# Although optional, it is recommended to specify this to improve the alignment of effects, such as 
# the tires' burnout smoke. If defaulted or non-specified, it is set as 85.7% of the sprite's 
# frame width.
sprite_vehicle_width = 48

# (Optional) A scaling factor applied to the sprite; 1.0 is no scaling.        (default=1.0)
# Although optional, it is recommended to specify this, otherwise the vehicle can appear too big or 
# too small compared to the others. The recommended way to obtain a suitable value for scale is to 
# divide the vehicle's real life width (in mm) by its width on the sprite (in pixels) and 
# then multiply the result by 24/895.
sprite_scale = 1.0

# (Optional) Individual scaling factors can also be specified for horizontal (x) and vertical (y) axis.     (default=1.0)
sprite_scale_x = 1.0
sprite_scale_y = 1.0

# (Optional) The offset between the sprite's bottom and the depicted contact point of the vehicle.       (default=<depends>)
# Usually the contact point(s) are the bottom of the vehicle's wheels, so this value can be fitted
# with ammount of pixels between the bottom of the sprite and bottom of the wheels. This is useful
# to specify when the sprite has a unusually large shadow, for example.
# When this value is specified as "default", a value of 2px is assumed. If left unspecified, the
# offset is assumed to be 0.
sprite_contact_offset = 2

# (Optional) The approximate turn angle (azimuth), in degrees, depicted on each animation state.      (default=max.45)
# On vehicle sprites that contains turning animation, it's assumed that these turning animation
# sprites are equally-angle-spaced (which means that between any two consecutive sprites of the
# turning animation, the azimuthal angle between them is roughly the same) and that the greatest 
# depicted azimuthal angle (and consequently, the last) is roughly 45 degrees. But in practice, 
# the actual turning angle depicted on sprites may be very small, or very big, or even contain 
# irregularly angle-spaced sprites. So specifying these azimuthal angles can prevent the vehicle's
# animation from "turning too slow" or "too fast", a weird "feeling" in-game that the vehicle is
# understeering or oversteering (drifting).
# This value can be specified for each sprite state individually, with a property of the 
# form 'sprite_state<i>_turn_angle', where 'i' is the state number, or for all states at once,
# with  the 'sprite_depicted_turn_angles' property, which is expected to contain a comma-separated
# list of angles.
#
# Examples: "sprite_depicted_turn_angles = 0, 15, 30"
#           or
#           "sprite_state0_turn_angle = 0"
#           "sprite_state1_turn_angle = 15"
#           "sprite_state2_turn_angle = 30"
#
# Alternatively, it's possible to only specify the greatest azimuthal angle depicted on the sprites,
# with the 'sprite_max_depicted_turn_angle' field, and the other previous angles are estimated. This
# estimation, by default, assumes equally-angle-spaced, but can be specified to expect other types
# of angle progression with the 'sprite_depicted_turn_angle_progression' field. Valid values for this
# field are 'linear' (equally-angle-spaced), 'linear-with-threshold' (default, equally-angle-spaced
# with fast-first-angle) and 'exponential' (exponetial-angle-spaced).
#
# Examples: "sprite_max_depicted_turn_angle = 30"
#           "sprite_depicted_turn_angle_progression = linear"
#
# Note that, for all cases, values greater than 45 makes some sprites not show on screen since the 
# maximum angle in-game is supposed to be 45 degrees (pi/4 radians). Specifying these values is 
# optional and if you are unsure, leave it unspecified altogether.
sprite_max_depicted_turn_angle = 20

# (Optional) The number of frames of each animation state.                                             (default=1)
# This value can be specified for all states at once, with the 'sprite_frame_count' property, and for
# each state individually, with a property of the form 'sprite_state<i>_frame_count', where 'i' is
# the state number. If ommited, a value of 1 is assumed (single frame). When specifying each state 
# frame count, you can ommit this value for states that have only 1 frame in them.
#
# Examples: "sprite_frame_count = 2"
#           or
#           "sprite_state0_frame_count = 2"
#           "sprite_state1_frame_count = 2"
#
# If both are specified, all states will be set with the former value and then overriden individually
# by each property.
sprite_frame_count = 3

# (Optional) The duration, in seconds, of each frame.                                                 (default=0.25)
# If ommitted, a value of 0.25 (quarter of a second) is used by default, which should be OK for most
# cases. Smaller values gives faster animations. If zero or a negative value is specified, no frame
# cycling will occur at all (and thus, no animation). Because of that, a value of -1 is recommended
# for cases when there is a single frame only in each state. It's also possible to specify this value
# as "dynamic" to request that the duration of frames change dynamically according to the vehicle's 
# speed (which is needed for wheeled vehicles, for example). Specifying this value is optional and 
# if you are unsure, set as default or leave unspecified. 
sprite_frame_duration = dynamic

# (Optional) A speed factor applied to the sprite's animation speed.                                  (default=1.0)
# This value works as a fast-forward or a slowdown to the sprite's animation. This is suitable for
# situations where the sprite sheet contains animation for more (or less) than one complete wheel
# animation cycle. If this value is ommitted or set as "default", it's assumed to be 1.0, which means
# normal speed (1x). Use values bigger than 1 (ex: 1.5, 2.0) for faster animation, and values in the
# range [0, 1] (ex: 0.75, 0.4) for slower animation. If zero or a negative value is specified, no 
# frame cycling will occur at all (and thus, no animation). Specifying this value is optional and if
# you are unsure, set as default or leave unspecified.
sprite_animation_speed_factor = default

# (Optional) The positions of the brakelights in relation to the vehicle's sprite.
# These coordinates are used to position the brakelights effects on the screen when braking and 
# probably should be different for each sprite state. Fill these values by measuring the position
# of where should the brakelights appear on each sprite state. Pay attention on the number of
# positions as they should match the number of states. For each entry, a pair of integers is
# expected. Alternatively, you may specify the X and Y position in two separate entries.
#
# Example: "brakelights_position0 = 10, 25"
#          or 
#          "brakelights_position0_x = 10"
#          "brakelights_position0_y = 25"
#
# If nothing is specified, a default position will be generated, but it's almost surely won't
# match appropriately. If the 'brakelights_multiple_sprites' property is true, the default
# positions will all be set zero.
brakelights_position0 = 13, 22
brakelights_position1 = 15, 22
brakelights_position2 = 17, 22
brakelights_position3 = 21, 22

# (Optional) The filename of the image containing the sprite for the brakelights effect overlay.      (default=<built-in asset>)
# The image must contain either a single image or a sheet with a number of sprites matching the
# amount of states (each case should be reported in the 'brakelights_multiple_sprites' property).
# Note that the actual brakelight image portraited in the sheet should be in the same scale as
# the vehicle sprite sheet if the 'brakelights_multiple_sprites' property is set as true.
# If set as default, a built-in asset will be used for the effect. If left unspecified, no
# brakelights will be drawn at all.
brakelights_sprite_filename = default

# (Optional) Specifies whether the brakelight sprite is a single image or a sprite sheet.         (default=false)
# If false, it's assumed that there only a single brakelight sprite on the image file, and it 
# will be used for all animation states. If true, the brakelight animation is assumed instead
# to have multiple sprites (sheet) on the image file, one per each animation state. The 
# brakelight sheet is also assumed to contain N equally sized frames, where N is the number of 
# states of this animation.
brakelights_multiple_sprites = false

# (Optional) Specifies whether the brakelight sprite will be drawn mirrowed as well.              (default=true)
# If true (default), a mirrowed version of the brakeligthts animation is also drawn in the 
# opposite of the vehicle. The position of the mirrowed brakelights is a mirrowed version of the
# brakelights positions, minus the animation width.
brakelights_mirrowed = true

# (Optional) Specifies scaling factor applied to the brakelight sprite; 1.0 is no scaling.        (default=<depends>)
# If a non-default 'brakelights_sprite_filename' property is specified, this scale is assumed
# to be the same as the main vehicle sprite's scale. Otherwise it is assumed to be 1.0.
brakelights_sprite_scale = default

# (Optional) Specifies an offset applied to the brakelights sprites' positions, meant to          (default=<depends>)
# center them when necessary, i.e. mirrowed sprites with surrounding alpha regions.
# If a value is specified for the 'brakelights_sprite_filename' property, this value is
# defaulted to 0. If 'brakelights_sprite_filename' is left unspecified of defaulted, a builtin
# value is set to match the default brakelights sprite metrics.
brakelights_sprite_offset_x = default
brakelights_sprite_offset_y = default

### SOUND
# sound can be defined as an class
sound = default_flat4_engine
